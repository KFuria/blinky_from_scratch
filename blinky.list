
blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c4 <Reset_Handler-0x14>:
 80001c4:	08000234 	.word	0x08000234
 80001c8:	20000000 	.word	0x20000000
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000000 	.word	0x20000000

080001d8 <Reset_Handler>:
necessary set is performed, after which the application
supplied main() routine is called. */

.type Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack      /* set stack pointer */
 80001d8:	f8df d02c 	ldr.w	sp, [pc, #44]	@ 8000208 <LoopFillZerobss+0xa>
    
// Move .data section from flash to SRAM
    ldr r0, =_sdata
 80001dc:	480b      	ldr	r0, [pc, #44]	@ (800020c <LoopFillZerobss+0xe>)
    ldr r1, =_edata
 80001de:	490c      	ldr	r1, [pc, #48]	@ (8000210 <LoopFillZerobss+0x12>)
    ldr r2, =_sidata
 80001e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000214 <LoopFillZerobss+0x16>)
    movs r3, #0
 80001e2:	2300      	movs	r3, #0
    b LoopCopyDataInit
 80001e4:	e002      	b.n	80001ec <LoopCopyDataInit>

080001e6 <CopyDataInit>:

    CopyDataInit:
        ldr r4, [r2, r3]
 80001e6:	58d4      	ldr	r4, [r2, r3]
        str r4, [r0, r3]
 80001e8:	50c4      	str	r4, [r0, r3]
        adds r3, r3, #4
 80001ea:	3304      	adds	r3, #4

080001ec <LoopCopyDataInit>:

    LoopCopyDataInit:
        adds r4, r0, r3
 80001ec:	18c4      	adds	r4, r0, r3
        cmp r4, r1
 80001ee:	428c      	cmp	r4, r1
        bcc CopyDataInit
 80001f0:	d3f9      	bcc.n	80001e6 <CopyDataInit>

    /* Zero fill the bss segment. */
    ldr r2, =_sbss
 80001f2:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <LoopFillZerobss+0x1a>)
    ldr r4, =_ebss
 80001f4:	4c09      	ldr	r4, [pc, #36]	@ (800021c <LoopFillZerobss+0x1e>)
    movs r3, #0
 80001f6:	2300      	movs	r3, #0
    b LoopFillZerobss
 80001f8:	e001      	b.n	80001fe <LoopFillZerobss>

080001fa <FillZerobss>:

    FillZerobss:
        str  r3, [r2]
 80001fa:	6013      	str	r3, [r2, #0]
        adds r2, r2, #4
 80001fc:	3204      	adds	r2, #4

080001fe <LoopFillZerobss>:

    LoopFillZerobss:
        cmp r2, r4
 80001fe:	42a2      	cmp	r2, r4
        bcc FillZerobss
 8000200:	d3fb      	bcc.n	80001fa <FillZerobss>

    bl main
 8000202:	f000 f80e 	bl	8000222 <main>
    bx lr
 8000206:	4770      	bx	lr
    ldr   sp, =_estack      /* set stack pointer */
 8000208:	20020000 	.word	0x20020000
    ldr r0, =_sdata
 800020c:	20000000 	.word	0x20000000
    ldr r1, =_edata
 8000210:	20000000 	.word	0x20000000
    ldr r2, =_sidata
 8000214:	08000234 	.word	0x08000234
    ldr r2, =_sbss
 8000218:	20000000 	.word	0x20000000
    ldr r4, =_ebss
 800021c:	20000000 	.word	0x20000000

08000220 <ADC_IRQHandler>:
the system state for examination by a debugger.
 */
.section .text.Default_Handler,"ax",%progbits /* this goes in .text section */
Default_Handler:
    Infinite_Loop:
        b  Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC_IRQHandler>

08000222 <main>:
#include "main.h"

int main() {
 8000222:	b480      	push	{r7}
 8000224:	b083      	sub	sp, #12
 8000226:	af00      	add	r7, sp, #0
  int val = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
  while (1) {
    val += 1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e7fb      	b.n	800022c <main+0xa>
